#!/usr/bin/env bash

# Define useful aliases and functions and prepare the directory structure.
# This script can be sourced from the project dir or from the docker dir inside the project dir.
# Other directories lead to unpredictable results!

currentdir=$(pwd)
if [ $(basename "$(pwd)") != "docker" ]; then
  cd docker
fi

# Load the environment
. environment > /dev/null

# set some variables
projectdir=$(dirname "$(pwd)")
net="${PROJECT_NAME}_dev_net"

appdir="${projectdir}/drupal"
consolevol="${projectdir}/.console:/root/.console"
drushvol="${projectdir}/.drush:/root/.drush"
node_version="my/node:latest"


cd ${currentdir}

# @function relpath
#           determines the relative directory path name of a directory according to a given basedir
# @param basedir (default: $appdir)
# @param relativedir (default: current dir)
function relpath ()
{
    if [ "${1}" ] ; then
        basedir="${1}"
    else
        basedir="${appdir}"
    fi
    if [ "${2}" ]; then
        relativedir="${2}"
    else
        relativedir="$(pwd)"
    fi
    tail=$(basename "${relativedir}")
    root=$(dirname "${relativedir}")
    base="${basedir}"
    while [ "${root}" != "/" ] && [ "${root}" != "." ] && [ "${root}" != "${base}" ] ; do
        echo ${root} >&2
        echo ${tail} >&2
        echo ${base} >&2
        echo $(pwd) >&2
        tailnew=$(basename ${root})/${tail}
        tail=${tailnew}
        rootnew=$(dirname ${root})
        root=${rootnew}
    done
    if [ ${root} != "/" ] && [ "${root}" != "." ] ; then
        echo ${tail}
    else
        echo web
    fi
}

# @function projectdir
#           returns the path of the project dir
function projectdir ()
{
    echo "${projectdir}"
}

# @function drush
#           calls dockerized drush for the current project. It uses the current directory as
#           working directory.
# @usage    drush drush commands...
function drush()
{
    docker run \
        --interactive \
        --rm \
        --volume="${appdir}":/app \
        --volume=${drushvol} \
        --workdir="/app/web" \
        --net="${net}" \
        \
        my/drush "${@}"
}

# @function drupal
#           calls dockerized drupal console for the current project. It uses the current directory as
#           working directory.
# @usage    drupal drupal-console commands...
function drupal()
{
    docker run \
        --interactive \
        --rm \
        --volume="${appdir}":/app \
        --volume="${consolevol}" \
        --workdir="/app/web" \
        --net="${net}" \
        \
        my/drupalconsole "${@}"
}

function node()
{
    docker run \
        --interactive \
        --tty \
        --rm \
        --volume="$(pwd)":/usr/src/app \
        --workdir=/usr/src/app \
        ${node_version} \
        \
        node "${@}"
}

function npm()
{
        docker run \
        --interactive \
        --tty \
        --rm \
        --volume="$(pwd)":/usr/src/app \
        --workdir=/usr/src/app \
        ${node_version} \
        \
        npm "${@}"
}

function gulp()
{
        docker run \
        --interactive \
        --tty \
        --rm \
        --volume="$(pwd)":/usr/src/app \
        --workdir=/usr/src/app \
        ${node_version} \
        \
        gulp "${@}"
}

# set aliases to invoke some tools in a container
alias drush=drush # drush.complete.sh requires an alias, does not act on functions
alias drupal=drupal # if scripts require an alias
alias node=node # if scripts require an alias
alias npm=npm # if scripts require an alias
alias gulp=gulp # if scripts require an alias
alias env=genv # Use Gnu 's `env` for this project

# workaround for Mac phpstorm Docker Integration plugin's API URL: http://localhost:2376
alias socat="socat TCP-LISTEN:2376,reuseaddr,fork UNIX-CONNECT:/var/run/docker.sock"
